#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para probar la validaci√≥n de n√∫meros de tel√©fono
"""

import re

def clean_phone_number(phone):
    """Limpia un n√∫mero de tel√©fono removiendo todos los caracteres no num√©ricos"""
    if phone is None:
        return ""
    return re.sub(r'\D', '', phone)

def validate_phone(phone):
    """Valida si un n√∫mero de tel√©fono tiene el formato correcto (internacional)"""
    if phone is None or phone.strip() == "":
        return False

    clean_phone = clean_phone_number(phone)
    
    # Validaci√≥n b√°sica: entre 7 y 15 d√≠gitos
    if len(clean_phone) < 7 or len(clean_phone) > 15:
        return False
    
    # Para n√∫meros espa√±oles (9 d√≠gitos), verificar que empiece por 6, 7 o 9
    if len(clean_phone) == 9:
        return re.match(r'^[679]\d{8}$', clean_phone) is not None
    
    # Para n√∫meros con prefijo internacional, verificar formato
    if clean_phone.startswith("34") and len(clean_phone) == 11:
        return re.match(r'^34[679]\d{8}$', clean_phone) is not None
    
    # Para otros prefijos internacionales, solo verificar longitud
    return True

def test_phone_numbers():
    """Prueba diferentes formatos de n√∫meros de tel√©fono"""
    
    test_cases = [
        # N√∫meros espa√±oles v√°lidos
        ("612345678", "N√∫mero espa√±ol 9 d√≠gitos"),
        ("712345678", "N√∫mero espa√±ol 9 d√≠gitos"),
        ("912345678", "N√∫mero espa√±ol 9 d√≠gitos"),
        ("+34612345678", "N√∫mero espa√±ol con +34"),
        ("0034612345678", "N√∫mero espa√±ol con 0034"),
        
        # N√∫meros internacionales v√°lidos
        ("1234567890", "N√∫mero de 10 d√≠gitos"),
        ("123456789012", "N√∫mero de 12 d√≠gitos"),
        ("+11234567890", "N√∫mero con +1"),
        ("+44123456789", "N√∫mero con +44"),
        
        # N√∫meros inv√°lidos
        ("123456", "Muy corto (6 d√≠gitos)"),
        ("1234567890123456", "Muy largo (16 d√≠gitos)"),
        ("812345678", "Espa√±ol empezando por 8"),
        ("", "Vac√≠o"),
        (None, "Null"),
    ]
    
    print("üß™ Probando validaci√≥n de n√∫meros de tel√©fono")
    print("=" * 60)
    
    for phone, description in test_cases:
        is_valid = validate_phone(phone)
        status = "‚úÖ V√ÅLIDO" if is_valid else "‚ùå INV√ÅLIDO"
        print(f"{status} | {phone or 'None':<15} | {description}")
    
    print("\nüì± Ahora puedes probar con tu n√∫mero de tel√©fono!")

if __name__ == "__main__":
    test_phone_numbers()
