package com.pomelo.app.springboot.app.service;

import com.pomelo.app.springboot.app.entity.PeriodoLaborable;
import com.pomelo.app.springboot.app.entity.Cita;
import com.pomelo.app.springboot.app.repository.PeriodoLaborableRepository;
import com.pomelo.app.springboot.app.repository.CitaRepository;
import com.pomelo.app.springboot.app.service.EmailService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;

@Service
public class PeriodoLaborableService {

    @Autowired
    private PeriodoLaborableRepository periodoLaborableRepository;
    
    @Autowired
    private CitaRepository citaRepository;
    
    @Autowired
    private GoogleCalendarService googleCalendarService;
    
    @Autowired
    private EmailService emailService;

    /**
     * Crear un nuevo per√≠odo laborable
     */
    public PeriodoLaborable crearPeriodo(PeriodoLaborable periodo) {
        // Validar que no haya solapamiento con otros per√≠odos
        List<PeriodoLaborable> periodosSolapados = periodoLaborableRepository.findPeriodosSolapados(
            periodo.getFechaInicio(), periodo.getFechaFin());
        
        if (!periodosSolapados.isEmpty()) {
            throw new RuntimeException("Ya existe un per√≠odo que se solapa con las fechas especificadas");
        }

        // Validar que el nombre no est√© duplicado
        List<PeriodoLaborable> periodosConMismoNombre = periodoLaborableRepository.findByNombreIgnoreCase(periodo.getNombre());
        if (!periodosConMismoNombre.isEmpty()) {
            throw new RuntimeException("Ya existe un per√≠odo con ese nombre");
        }

        PeriodoLaborable periodoGuardado = periodoLaborableRepository.save(periodo);
        
        // Verificar si hay citas existentes que ahora est√°n en d√≠as no laborables
        verificarCitasExistentesEnPeriodoNuevo(periodo);
        
        return periodoGuardado;
    }
    
    /**
     * Verifica si hay citas existentes que ahora est√°n en d√≠as no laborables del nuevo per√≠odo
     */
    private void verificarCitasExistentesEnPeriodoNuevo(PeriodoLaborable periodo) {
        System.out.println("üîç Verificando citas existentes para nuevo per√≠odo: " + periodo.getNombre());
        
        // Buscar todas las citas en el rango de fechas del per√≠odo
        List<Cita> citasEnRango = citaRepository.findByFechaHoraBetweenAndEstadoNot(
            periodo.getFechaInicio().atStartOfDay(),
            periodo.getFechaFin().atTime(23, 59, 59),
            "cancelada"
        );
        
        System.out.println("   Citas existentes en el rango: " + citasEnRango.size());
        
        int citasCanceladas = 0;
        for (Cita cita : citasEnRango) {
            LocalDate fechaCita = cita.getFechaHora().toLocalDate();
            DayOfWeek diaSemanaCita = fechaCita.getDayOfWeek();
            String diaSemanaStr = diaSemanaCita.toString();
            
            System.out.println("   Verificando cita ID " + cita.getId() + " - Fecha: " + fechaCita + " - D√≠a: " + diaSemanaStr);
            
            // Si la cita est√° en un d√≠a que NO est√° marcado como laborable en el per√≠odo, cancelarla
            if (!periodo.getDiasLaborables().contains(diaSemanaStr)) {
                System.out.println("   Cancelando cita ID " + cita.getId() + " - D√≠a no laborable en nuevo per√≠odo");
                
                                 cita.setEstado("cancelada");
                 cita.setComentario("Cita cancelada autom√°ticamente: d√≠a no laborable en nuevo per√≠odo '" + periodo.getNombre() + "'");
                 citaRepository.save(cita);
                 
                 // Enviar email de cancelaci√≥n al cliente
                 try {
                     DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
                     String fechaHoraFormateada = cita.getFechaHora().format(formatter);
                     
                     emailService.enviarCancelacionCita(
                         cita.getCliente().getEmail(),
                         cita.getCliente().getNombre(),
                         cita.getServicio().getNombre(),
                         cita.getFechaHora(),
                         cita.getServicio().getDuracionMinutos(),
                         cita.getServicio().getPrecio()
                     );
                     System.out.println("üìß Email de cancelaci√≥n enviado a: " + cita.getCliente().getEmail());
                 } catch (Exception e) {
                     System.err.println("‚ùå Error al enviar email de cancelaci√≥n para cita ID " + cita.getId() + ": " + e.getMessage());
                 }
                 
                 // Eliminar eventos de Google Calendar
                 try {
                     googleCalendarService.deleteCalendarEventsForUserAndAdmin(cita, cita.getCliente());
                     System.out.println("üóëÔ∏è Eventos de Google Calendar eliminados para cita ID: " + cita.getId());
                 } catch (Exception e) {
                     System.err.println("‚ùå Error al eliminar eventos de Google Calendar para cita ID " + cita.getId() + ": " + e.getMessage());
                 }
                
                citasCanceladas++;
            }
        }
        
        if (citasCanceladas > 0) {
            System.out.println("‚ö†Ô∏è Se han cancelado " + citasCanceladas + " citas existentes debido al nuevo per√≠odo '" + periodo.getNombre() + "'");
        }
    }

    /**
     * Obtener todos los per√≠odos activos
     */
    public List<PeriodoLaborable> obtenerPeriodosActivos() {
        return periodoLaborableRepository.findByActivoTrue();
    }

    /**
     * Obtener per√≠odos activos para una fecha espec√≠fica
     */
    public List<PeriodoLaborable> obtenerPeriodosActivosPorFecha(LocalDate fecha) {
        return periodoLaborableRepository.findPeriodosActivosPorFecha(fecha);
    }

    /**
     * Obtener un per√≠odo por ID
     */
    public Optional<PeriodoLaborable> obtenerPeriodoPorId(Long id) {
        return periodoLaborableRepository.findById(id);
    }

    /**
     * Eliminar un per√≠odo
     */
    public void eliminarPeriodo(Long id) {
        Optional<PeriodoLaborable> periodoExistente = periodoLaborableRepository.findById(id);
        
        if (periodoExistente.isEmpty()) {
            throw new RuntimeException("Per√≠odo no encontrado");
        }
        
        PeriodoLaborable periodo = periodoExistente.get();
        
        // Cancelar todas las citas en el rango del per√≠odo antes de eliminarlo
        cancelarCitasEnPeriodoEliminado(periodo);
        
        periodoLaborableRepository.deleteById(id);
    }
    
    /**
     * Cancela todas las citas en un per√≠odo que se va a eliminar
     */
    private void cancelarCitasEnPeriodoEliminado(PeriodoLaborable periodo) {
        System.out.println("üóëÔ∏è Eliminando per√≠odo: " + periodo.getNombre() + " - Cancelando todas las citas en el rango");
        
        // Buscar todas las citas en el rango de fechas del per√≠odo
        List<Cita> citasAAfectar = citaRepository.findByFechaHoraBetweenAndEstadoNot(
            periodo.getFechaInicio().atStartOfDay(),
            periodo.getFechaFin().atTime(23, 59, 59),
            "cancelada"
        );
        
        System.out.println("   Citas encontradas en el per√≠odo a eliminar: " + citasAAfectar.size());
        
        int citasCanceladas = 0;
        for (Cita cita : citasAAfectar) {
            LocalDate fechaCita = cita.getFechaHora().toLocalDate();
            DayOfWeek diaSemanaCita = fechaCita.getDayOfWeek();
            String diaSemanaStr = diaSemanaCita.toString();
            
            // Solo cancelar si el d√≠a estaba marcado como laborable en el per√≠odo
            if (periodo.getDiasLaborables().contains(diaSemanaStr)) {
                System.out.println("   Cancelando cita ID " + cita.getId() + " - Fecha: " + fechaCita + " - D√≠a: " + diaSemanaStr);
                
                                 cita.setEstado("cancelada");
                 cita.setComentario("Cita cancelada autom√°ticamente: per√≠odo '" + periodo.getNombre() + "' eliminado");
                 citaRepository.save(cita);
                 
                 // Enviar email de cancelaci√≥n al cliente
                 try {
                     DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
                     String fechaHoraFormateada = cita.getFechaHora().format(formatter);
                     
                     emailService.enviarCancelacionCita(
                         cita.getCliente().getEmail(),
                         cita.getCliente().getNombre(),
                         cita.getServicio().getNombre(),
                         cita.getFechaHora(),
                         cita.getServicio().getDuracionMinutos(),
                         cita.getServicio().getPrecio()
                     );
                     System.out.println("üìß Email de cancelaci√≥n enviado a: " + cita.getCliente().getEmail());
                 } catch (Exception e) {
                     System.err.println("‚ùå Error al enviar email de cancelaci√≥n para cita ID " + cita.getId() + ": " + e.getMessage());
                 }
                 
                 // Eliminar eventos de Google Calendar
                 try {
                     googleCalendarService.deleteCalendarEventsForUserAndAdmin(cita, cita.getCliente());
                     System.out.println("üóëÔ∏è Eventos de Google Calendar eliminados para cita ID: " + cita.getId());
                 } catch (Exception e) {
                     System.err.println("‚ùå Error al eliminar eventos de Google Calendar para cita ID " + cita.getId() + ": " + e.getMessage());
                 }
                
                citasCanceladas++;
            }
        }
        
        if (citasCanceladas > 0) {
            System.out.println("‚ö†Ô∏è Se han cancelado " + citasCanceladas + " citas debido a la eliminaci√≥n del per√≠odo '" + periodo.getNombre() + "'");
        }
    }

    /**
     * Verificar si una fecha espec√≠fica es laborable seg√∫n los per√≠odos configurados
     */
    public boolean esFechaLaborable(LocalDate fecha) {
        List<PeriodoLaborable> periodosActivos = periodoLaborableRepository.findPeriodosActivosPorFecha(fecha);
        
        if (periodosActivos.isEmpty()) {
            return false; // Si no hay per√≠odos activos para esa fecha, no es laborable
        }

        // Verificar si el d√≠a de la semana est√° en los d√≠as laborables de alg√∫n per√≠odo
        DayOfWeek diaSemana = fecha.getDayOfWeek();
        String diaSemanaStr = diaSemana.toString();

        // Si hay per√≠odos activos para esta fecha, SOLO es laborable si est√° expl√≠citamente marcado como laborable
        for (PeriodoLaborable periodo : periodosActivos) {
            if (periodo.getDiasLaborables().contains(diaSemanaStr)) {
                return true; // Solo es laborable si est√° expl√≠citamente en la lista de d√≠as laborables
            }
        }

        // Si hay per√≠odos activos pero el d√≠a no est√° en la lista de d√≠as laborables, NO es laborable
        return false;
    }

    /**
     * Obtener informaci√≥n de disponibilidad para una fecha espec√≠fica
     */
    public String obtenerInformacionDisponibilidad(LocalDate fecha) {
        List<PeriodoLaborable> periodosActivos = periodoLaborableRepository.findPeriodosActivosPorFecha(fecha);
        
        if (periodosActivos.isEmpty()) {
            return "Cerrado: No hay per√≠odos activos para esta fecha";
        }

        DayOfWeek diaSemana = fecha.getDayOfWeek();
        String diaSemanaStr = diaSemana.toString();

        for (PeriodoLaborable periodo : periodosActivos) {
            if (periodo.getDiasLaborables().contains(diaSemanaStr)) {
                return "Abierto: " + periodo.getNombre();
            }
        }

        return "Cerrado: D√≠a no laborable seg√∫n los per√≠odos configurados";
    }

    /**
     * Actualizar un per√≠odo existente
     */
    public PeriodoLaborable actualizarPeriodo(Long id, PeriodoLaborable periodoActualizado) {
        Optional<PeriodoLaborable> periodoExistente = periodoLaborableRepository.findById(id);
        
        if (periodoExistente.isEmpty()) {
            throw new RuntimeException("Per√≠odo no encontrado");
        }

        PeriodoLaborable periodo = periodoExistente.get();
        
        // Guardar los d√≠as laborables anteriores para comparar
        List<String> diasLaborablesAnteriores = periodo.getDiasLaborables();
        
        // Actualizar el per√≠odo
        periodo.setNombre(periodoActualizado.getNombre());
        periodo.setFechaInicio(periodoActualizado.getFechaInicio());
        periodo.setFechaFin(periodoActualizado.getFechaFin());
        periodo.setDiasLaborables(periodoActualizado.getDiasLaborables());
        periodo.setDescripcion(periodoActualizado.getDescripcion());
        periodo.setActivo(periodoActualizado.isActivo());

        // Guardar el per√≠odo actualizado
        PeriodoLaborable periodoGuardado = periodoLaborableRepository.save(periodo);
        
        // Verificar y cancelar citas afectadas
        verificarYCancelarCitasAfectadas(periodo, diasLaborablesAnteriores, periodoActualizado.getDiasLaborables());
        
        return periodoGuardado;
    }
    
    /**
     * Verifica y cancela las citas que ya no son v√°lidas despu√©s de actualizar un per√≠odo
     */
    private void verificarYCancelarCitasAfectadas(PeriodoLaborable periodo, List<String> diasAnteriores, List<String> diasNuevos) {
        System.out.println("üîç Verificando cancelaci√≥n autom√°tica para per√≠odo: " + periodo.getNombre());
        System.out.println("   D√≠as anteriores: " + diasAnteriores);
        System.out.println("   D√≠as nuevos: " + diasNuevos);
        
        // Encontrar d√≠as que ya no son laborables
        List<String> diasCancelados = diasAnteriores.stream()
            .filter(dia -> !diasNuevos.contains(dia))
            .toList();
        
        System.out.println("   D√≠as cancelados: " + diasCancelados);
        
        if (diasCancelados.isEmpty()) {
            System.out.println("   No hay d√≠as cancelados, no hay citas que cancelar");
            return; // No hay d√≠as cancelados, no hay citas que cancelar
        }
        
        // Buscar citas en el rango de fechas del per√≠odo que est√°n en d√≠as cancelados
        List<Cita> citasAAfectar = citaRepository.findByFechaHoraBetweenAndEstadoNot(
            periodo.getFechaInicio().atStartOfDay(),
            periodo.getFechaFin().atTime(23, 59, 59),
            "cancelada"
        );
        
        System.out.println("   Citas encontradas en el rango: " + citasAAfectar.size());
        
        int citasCanceladas = 0;
        for (Cita cita : citasAAfectar) {
            LocalDate fechaCita = cita.getFechaHora().toLocalDate();
            DayOfWeek diaSemanaCita = fechaCita.getDayOfWeek();
            String diaSemanaStr = diaSemanaCita.toString();
            
            System.out.println("   Verificando cita ID " + cita.getId() + " - Fecha: " + fechaCita + " - D√≠a: " + diaSemanaStr);
            
                         // Si la cita est√° en un d√≠a que ya no es laborable, cancelarla
             if (diasCancelados.contains(diaSemanaStr)) {
                 cita.setEstado("cancelada");
                 cita.setComentario("Cita cancelada autom√°ticamente: d√≠a marcado como no laborable en per√≠odo '" + periodo.getNombre() + "'");
                 citaRepository.save(cita);
                 
                 // Enviar email de cancelaci√≥n al cliente
                 try {
                     DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
                     String fechaHoraFormateada = cita.getFechaHora().format(formatter);
                     
                     emailService.enviarCancelacionCita(
                         cita.getCliente().getEmail(),
                         cita.getCliente().getNombre(),
                         cita.getServicio().getNombre(),
                         cita.getFechaHora(),
                         cita.getServicio().getDuracionMinutos(),
                         cita.getServicio().getPrecio()
                     );
                     System.out.println("üìß Email de cancelaci√≥n enviado a: " + cita.getCliente().getEmail());
                 } catch (Exception e) {
                     System.err.println("‚ùå Error al enviar email de cancelaci√≥n para cita ID " + cita.getId() + ": " + e.getMessage());
                 }
                 
                 // Eliminar eventos de Google Calendar
                 try {
                     googleCalendarService.deleteCalendarEventsForUserAndAdmin(cita, cita.getCliente());
                     System.out.println("üóëÔ∏è Eventos de Google Calendar eliminados para cita ID: " + cita.getId());
                 } catch (Exception e) {
                     System.err.println("‚ùå Error al eliminar eventos de Google Calendar para cita ID " + cita.getId() + ": " + e.getMessage());
                 }
                 
                 citasCanceladas++;
             }
        }
        
        if (citasCanceladas > 0) {
            System.out.println("‚ö†Ô∏è Se han cancelado " + citasCanceladas + " citas debido a cambios en el per√≠odo '" + periodo.getNombre() + "'");
        }
    }
}
