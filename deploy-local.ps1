# ========================================
# SCRIPT DE DESPLIEGUE LOCAL PARA ESENTIAL BARBER (WINDOWS)
# ========================================

Write-Host "üöÄ Iniciando despliegue local de Esential Barber..." -ForegroundColor Green

# Verificar si Docker est√° instalado
try {
    $dockerVersion = docker --version
    Write-Host "‚úÖ Docker est√° instalado: $dockerVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker no est√° instalado. Por favor instala Docker Desktop primero." -ForegroundColor Red
    exit 1
}

# Verificar si Docker Compose est√° instalado
try {
    $composeVersion = docker-compose --version
    Write-Host "‚úÖ Docker Compose est√° instalado: $composeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker Compose no est√° instalado. Por favor instala Docker Compose primero." -ForegroundColor Red
    exit 1
}

# Verificar si Docker Desktop est√° ejecut√°ndose
try {
    docker info | Out-Null
    Write-Host "‚úÖ Docker Desktop est√° ejecut√°ndose" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker Desktop no est√° ejecut√°ndose. Por favor inicia Docker Desktop." -ForegroundColor Red
    exit 1
}

# Parar contenedores existentes si los hay
Write-Host "üõë Parando contenedores existentes..." -ForegroundColor Yellow
docker-compose down

# Preguntar si limpiar im√°genes antiguas
$cleanImages = Read-Host "¬øQuieres limpiar im√°genes Docker antiguas? (y/n)"
if ($cleanImages -eq "y" -or $cleanImages -eq "Y") {
    Write-Host "üßπ Limpiando im√°genes antiguas..." -ForegroundColor Yellow
    docker system prune -f
}

# Construir y levantar los servicios
Write-Host "üî® Construyendo y levantando servicios..." -ForegroundColor Yellow
docker-compose up --build -d

# Esperar a que los servicios est√©n listos
Write-Host "‚è≥ Esperando a que los servicios est√©n listos..." -ForegroundColor Yellow
Start-Sleep -Seconds 30

# Verificar el estado de los contenedores
Write-Host "üìä Estado de los contenedores:" -ForegroundColor Cyan
docker-compose ps

# Verificar logs del backend
Write-Host "üìã Logs del backend:" -ForegroundColor Cyan
docker-compose logs backend --tail=20

# Verificar conectividad
Write-Host "üîç Verificando conectividad..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://localhost:8080/actuator/health" -UseBasicParsing -TimeoutSec 10
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Backend est√° funcionando correctamente en http://localhost:8080" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Backend responde pero con estado: $($response.StatusCode)" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Backend no responde. Revisa los logs con: docker-compose logs backend" -ForegroundColor Red
}

Write-Host ""
Write-Host "üéâ ¬°Despliegue local completado!" -ForegroundColor Green
Write-Host ""
Write-Host "üì± URLs de acceso:" -ForegroundColor Cyan
Write-Host "   Backend API: http://localhost:8080" -ForegroundColor White
Write-Host "   Health Check: http://localhost:8080/actuator/health" -ForegroundColor White
Write-Host "   PostgreSQL: localhost:5432" -ForegroundColor White
Write-Host ""
Write-Host "üîß Comandos √∫tiles:" -ForegroundColor Cyan
Write-Host "   Ver logs: docker-compose logs -f" -ForegroundColor White
Write-Host "   Parar servicios: docker-compose down" -ForegroundColor White
Write-Host "   Reiniciar: docker-compose restart" -ForegroundColor White
Write-Host "   Ver estado: docker-compose ps" -ForegroundColor White
Write-Host ""
Write-Host "üí° Para abrir en el navegador:" -ForegroundColor Cyan
Write-Host "   start http://localhost:8080" -ForegroundColor White
